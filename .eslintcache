[{"C:\\Users\\t_thialmeida\\Desktop\\react-todo-app\\src\\index.tsx":"1","C:\\Users\\t_thialmeida\\Desktop\\react-todo-app\\src\\reportWebVitals.ts":"2","C:\\Users\\t_thialmeida\\Desktop\\react-todo-app\\src\\App.tsx":"3"},{"size":500,"mtime":1607533055353,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1607533055353,"results":"6","hashOfConfig":"5"},{"size":4278,"mtime":1609254890075,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"8bwwt0",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\t_thialmeida\\Desktop\\react-todo-app\\src\\index.tsx",[],["16","17"],"C:\\Users\\t_thialmeida\\Desktop\\react-todo-app\\src\\reportWebVitals.ts",[],"C:\\Users\\t_thialmeida\\Desktop\\react-todo-app\\src\\App.tsx",["18"],"import React, { useState, useEffect } from 'react';\nimport { uuid } from 'uuidv4';\nimport { FiEdit2, FiTrash } from \"react-icons/fi\";\nimport './App.css';\n\ninterface Task {\n  id: string;\n  description: string;\n  done: boolean;\n  createdAt: Date;\n}\n\n\nfunction App() {\n  const [tasks, setTask] = useState<Task[]>([]);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [taskDraft, setTaskDraft] = useState<string>('new task');\n  const [optionChange, setOptionChange] = useState<number>(1);\n  const [currentId, setCurrentId] = useState<string>();\n  const [buttonName, setButtonName] = useState<any>('ADD');\n\n  useEffect(() => {\n    if(localStorage) {\n      const taskString = localStorage.getItem('tasks');\n      if (taskString) {\n        setTask(JSON.parse(taskString));\n      }\n    }\n    document.getElementById('task-input')?.focus();\n  }, []);\n\n  useEffect(() => {\n    if(localStorage) {\n      const tasksString = JSON.stringify(tasks);\n      localStorage.setItem('tasks', tasksString);\n    }\n  }, [tasks])\n\n  function handleAddTask(){\n    setErrorMessage('');\n    console.log(optionChange);\n    if (!taskDraft.trim()) {\n      setErrorMessage('Fill the task description.')\n    }else{\n      if(optionChange === 1){\n        let newTask : Task = {\n          id : uuid(),\n          description : taskDraft,\n          done : false,\n          createdAt : new Date()\n        };\n        setTask([...tasks, newTask]);      \n      }else{\n        let newTasks = tasks.map( t => {\n          if (t.id !== currentId){\n            return t;\n          }else {\n            return {\n              ...t,\n              description: taskDraft\n            };\n          }\n        })\n        setTask(newTasks);\n        setOptionChange(1);\n      }\n    }\n    document.getElementById('task-input')?.focus();\n    setButtonName('ADD');\n    setTaskDraft('');\n  }\n\n  function handleDeleteTask(id: string){\n    setTask(tasks.filter(t => t.id !== id));\n    document.getElementById('task-input')?.focus();\n  }\n\n  function handleMarkTaskDone(id: string){\n    let newTasks = tasks.map( t => {\n      if (t.id !== id){\n        return t;\n      }else {\n        return {\n          ...t,\n          done: !t.done\n        };\n      }\n    })\n    setTask(newTasks);\n  }\n\n  function handleEditTask(id: string){\n    tasks.map(t => {\n      if (t.id === id){\n        setTaskDraft(t.description);\n      }\n    });\n\n    setOptionChange(2);\n    setCurrentId(id);\n    setButtonName(<FiEdit2></FiEdit2>);\n    document.getElementById('task-input')?.focus();\n  }\n\n  function handleClearTasks(){\n    setTask([]);\n  }\n\n  return (\n    <div className=\"container\">\n\n        <h1 className=\"title\">TO-DO LIST</h1>  \n      <div>\n        <div className=\"new-task-box\">\n          <input \n            type=\"text\" \n            value={ taskDraft } \n            onChange={ e => setTaskDraft(e.target.value) }\n            id=\"task-input\"\n            onKeyPress={ event => {\n                if(event.key === 'Enter') {\n                  handleAddTask();\n                }\n              }\n            }\n          ></input>\n          <button type=\"button\" onClick={ () => handleAddTask() }>{buttonName}</button>  \n        </div>\n        { errorMessage && <p className=\"error-message\">{ errorMessage }</p> }\n      </div>\n\n      <div className=\"tasks-box\">\n        {tasks.map( task => {\n              return <div className=\"task\">\n                <div>       \n                  <input className=\"checkbox\" checked={task.done} type=\"checkbox\" onChange={() => handleMarkTaskDone(task.id)}/> \n                  <p className={task.done? \"task-done\" : \"task-not-done\"}>{ task.description }</p>\n                </div>\n\n                <div>\n                  <button id=\"edit-button\" type=\"button\" onClick= { () => handleEditTask(task.id) }><FiEdit2></FiEdit2></button>\n                  <button type=\"button\" onClick={ () => { handleDeleteTask(task.id) } }> <FiTrash></FiTrash></button>\n                </div>\n                \n              </div>\n            }\n          )\n        }\n      <div className=\"clear-button-box\">\n        <button \n          type=\"button\" \n          disabled={tasks.length === 0} \n          onClick={handleClearTasks}\n        >CLEAR</button>\n      </div> \n    </div>\n      </div>\n      \n  );\n}\n\nexport default App;",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":93,"column":17,"nodeType":"25","messageId":"26","endLine":93,"endColumn":19},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]